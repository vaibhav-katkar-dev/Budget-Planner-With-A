<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transactions</title>
    <link rel="stylesheet" href="/styles/transaction.css">
    <link rel="stylesheet" href="/styles/index.css">
    <link rel="stylesheet" href="/styles/bot.css">

    <link rel="stylesheet" href="/styles/toggle.css">


</head>
<body>

    <div class="container">
        <!-- Left Sidebar -->
        <nav class="sidebar">
            <h2>ðŸ“Š Budget Planner</h2>
            <ul>
                <li><a href="/dashboard">Overview</a></li>
                <li><a href="transaction">Transactions</a></li>
                <li><a href="budjet">Budgets</a></li>
                <li><a href="#">Reports</a></li>
                <li><a href="#">Settings</a></li>
            </ul>
        
<!-- Add this button anywhere in your HTML -->
<button id="theme-toggle" class="toggle-theme">Toggle Theme</button>

<button id="logout-btn" class="logout">Logout</button>

        </nav>

        <!-- Main Content -->
        <div class="dashboard">
            <div class="content">
                <h1>Add Transaction</h1>

                <!-- Form to Add Income or Expense -->
                <div class="transaction-form">
                    <!-- <h2>Add Transaction</h2> -->
                    <form id="transactionForm">
                        <select id="type" name="type" class="input-field">
                            <option value="income">Income</option>
                            <option value="expense">Expense</option>
                        </select>

                        <input type="number" id="amount" placeholder="Amount" name="amount" class="input-field" required>

                        <select id="category" name="category" class="input-field" required>
                            <optgroup label="Expenses">
                                <option value="food">Food & Dining</option>
                                <option value="transport">Transportation</option>
                                <option value="rent">Rent/Mortgage</option>
                                <option value="utilities">Utilities</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="shopping">Shopping</option>
                                <option value="health">Health & Medical</option>
                                <option value="education">Education</option>
                                <option value="travel">Travel</option>
                                <option value="subscriptions">Subscriptions</option>
                                <option value="loan">Loan Payments</option>
                                <option value="insurance">Insurance</option>
                                <option value="savings">Savings & Investments</option>
                                <option value="other_expense">Other</option>
                            </optgroup>
                        </select>

                        <input type="date" id="date" name="date" class="input-field" required>

                        <button type="submit" class="btn">Add Transaction</button>
                    </form>
                </div>

                <!-- Transaction History Table -->
                <div class="transaction-history">
                    <h2>Transaction History</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Category</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody id="transactionTableBody">
                            <!-- Transactions will be dynamically added here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div id="floating-bot" >
        <div id="bot-icon" >
            <script src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>
            <dotlottie-player src="https://lottie.host/2ff7cd10-1494-4861-840a-89b7b2197564/VPVjGQtPNT.lottie" background="transparent" speed="1" style="width: 300px; height: 300px" loop autoplay>
                
            </dotlottie-player>
        </div>
        <div id="bot-chat" class="hidden">
            <div id="bot-header">
                <span>AI Bot</span>
                <button id="close-bot">&times;</button>
            </div>
            <div id="bot-messages">
                <p class="bot-text">Hello! How can I help you?</p>
            </div>
            <div id="bot-input">
                <input type="text" id="user-message" placeholder="Ask me anything...">
                <button id="send-message">âž¤</button>
            </div>
        </div>
    </div>

    <script src="/scripts/bot.js"></script>


    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const transactionForm = document.getElementById("transactionForm");
            const transactionTableBody = document.getElementById("transactionTableBody");

            // Fetch transactions from API
            const fetchTransactions = async () => {
                try {
                    const response = await fetch("/api/data");
                    const data = await response.json();
                    const aggregatedTransactions = aggregateTransactions(data.transactions);
                    updateTransactionTable(aggregatedTransactions);
                } catch (error) {
                    console.error("Error fetching transactions:", error);
                }
            };

            // Aggregate transactions by category
            const aggregateTransactions = (transactions) => {
                const aggregated = {};

                transactions.forEach(txn => {
                    const key = `${txn.type}-${txn.category}`; // Unique key for type-category
                    if (!aggregated[key]) {
                        aggregated[key] = { ...txn };
                    } else {
                        aggregated[key].amount += txn.amount; // Add amount if category repeats
                    }
                });

                return Object.values(aggregated);
            };

            // Update transaction table
            const updateTransactionTable = (transactions) => {
                transactionTableBody.innerHTML = "";
                transactions.forEach((txn) => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${txn.type}</td>
                        <td>â‚¹${txn.amount}</td>
                        <td>${txn.category}</td>
                        <td>${txn.date || "N/A"}</td>
                    `;
                    transactionTableBody.appendChild(row);
                });
            };

            // Handle form submission
            transactionForm.addEventListener("submit", async (event) => {
                event.preventDefault();

                // Get input values
                const type = document.getElementById("type").value;
                const amount = parseFloat(document.getElementById("amount").value);
                const category = document.getElementById("category").value;
                const date = document.getElementById("date").value;

                // Validate amount
                if (isNaN(amount) || amount <= 0) {
                    alert("Please enter a valid amount.");
                    return;
                }

                // Send data to backend
                try {
                    const response = await fetch("/api/add-transaction", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ type, amount, category, date })//userId
                    });

                    const result = await response.json();

                    if (response.ok) {
                        alert("Transaction added successfully!");
                        transactionForm.reset();
                        fetchTransactions(); // Refresh table
                    } else {
                        alert("Error: " + result.message);
                    }
                } catch (error) {
                    console.error("Error sending data:", error);
                }
            });

            fetchTransactions(); // Load transactions on page load
        });
    </script>

    <script src="/scripts/script.js"></script>
    <script src="/scripts/toggle.js"></script>
</body>
</html>
